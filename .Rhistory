fluidRow(
lapply(0:3, FUN = function(j) {
column(
width = 3,
lapply((1:37) + 37 * j, FUN = function(i) {
tagList(
sliderInput(
inputId = paste0("slider", i),
label = paste("Slider", slider_colors[i], "Flat design:"),
min = 0, max = 1, value = 0.5
)
)
})
)
})
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp('run.R')
library(shiny); runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
prepare_data_for_rpart <- function(data) {
data_df <- as.data.frame(data)
char_vars <- sapply(data_df, is.character)
data_df[char_vars] <- lapply(data_df[char_vars], as.factor)
logical_vars <- sapply(data_df, is.logical)
data_df[logical_vars] <- lapply(data_df[logical_vars], as.factor)
#unselect nonfactor and nonnumeric
valid_vars <- sapply(data_df, function(col) is.factor(col) || is.numeric(col) || is.integer(col) || is.logical(col))
selected_vars <- colnames(data_df[valid_vars])
excluded_vars <- colnames(data_df)[!valid_vars]
excluded_info <- list(
count = length(excluded_vars),
variables = excluded_vars
)
data_df <- data_df[, valid_vars, drop = FALSE]
return(list(data = data_df, excluded_info = excluded_info))
}
View(newdata)
test<- prepare_data_for_rpart(newdata)
count <- test$excluded_info$count
features_name <- test$excluded_info$variables
generate_text_excluded_feature <- function(count, features_name ) {
if(count > 0){
summary_text <- paste(
"Machinely has automatically excluded",
count, ifelse(count == 1, "feature", "features"),
paste("from model training :", features_name)
)
} else{
summary_text <- paste(
"Machinely has retained all features for model training")
}
return(summary_text)
}
generate_text_excluded_feature(count, features_name)
View(test)
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
library(shiny); runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
library(shiny); runApp('run.R')
library(shiny); runApp('run.R')
library(shiny)
ui <- fluidPage(
titlePanel("Shiny Aplikacija sa Linkom"),
sidebarLayout(
sidebarPanel(
# Opcioni sadržaj bočnog panela
),
mainPanel(
# Link
tags$a("Prijavi se", href = "http://www.example.com", target = "_blank")
)
)
)
server <- function(input, output) {
# Server logika (opciono)
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny Aplikacija sa Stilizovanim Linkom"),
sidebarLayout(
sidebarPanel(
# Opcioni sadržaj bočnog panela
),
mainPanel(
# Stilizovani link
div(
style = "text-decoration: none; color: blue; cursor: pointer;",
"Prijavi se",
id = "myLink"
)
)
)
)
server <- function(input, output, session) {
# Dodajte logiku kada se klikne na link
observeEvent(input$myLink, {
# Dodajte željenu logiku kada se klikne na link
# Na primer, pređite na drugi deo UI
updateTabsetPanel(session, "myTabs", selected = "secondTab")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny Aplikacija sa Stilizovanim Linkom"),
sidebarLayout(
sidebarPanel(
# Opcioni sadržaj bočnog panela
),
mainPanel(
# Stilizovani link
div(
style = "text-decoration: none; color: blue; cursor: pointer;",
"Prijavi se",
id = "myLink"
)
)
)
)
server <- function(input, output, session) {
# Dodajte logiku kada se klikne na link
observeEvent(input$myLink, {
# Dodajte željenu logiku kada se klikne na link
# Na primer, pređite na drugi deo UI
updateTabsetPanel(session, "myTabs", selected = "secondTab")
})
}
shinyApp(ui, server)
library(shiny)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny Aplikacija sa Stilizovanim Linkom"),
sidebarLayout(
sidebarPanel(
# Opcioni sadržaj bočnog panela
),
mainPanel(
# Stilizovani link
div(
style = "text-decoration: none; color: blue; cursor: pointer;",
"Prijavi se",
id = "myLink"
),
# Drugi deo UI-a (početno skriven)
uiOutput("secondUI")
)
)
)
server <- function(input, output, session) {
# Dodajte logiku kada se klikne na link
observeEvent(input$myLink, {
# Dodajte željenu logiku kada se klikne na link
# Na primer, prikažite drugi deo UI-a
output$secondUI <- renderUI({
fluidRow(
column(6, h3("Drugi deo UI-a"), verbatimTextOutput("text"))
)
})
})
# Dodatna logika za drugi deo UI-a (po želji)
output$text <- renderText({
"Ovo je drugi deo UI-a koji se pojavljuje nakon klika na link."
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny Aplikacija sa Modalnim Dijalogom"),
sidebarLayout(
sidebarPanel(
# Lista dostupnih opcija koje korisnik može kliknuti
selectInput("selectedOption", "Izaberite opciju:", c("Salesperson", "Product", "Customer")),
),
mainPanel(
# Prikaz izabrane opcije
textOutput("selectedText"),
# Modalni dijalog
actionButton("openModal", "Detalji"),
# Dinamički UI za modalni dijalog
uiOutput("modalUI")
)
)
)
server <- function(input, output, session) {
# Logika za prikaz izabrane opcije
output$selectedText <- renderText({
paste("Izabrana opcija:", input$selectedOption)
})
# Logika za otvaranje modalnog dijaloga
observeEvent(input$openModal, {
showModal(modalDialog(
title = paste("Detalji za", input$selectedOption),
fluidRow(
column(12, verbatimTextOutput("modalContent"))
),
footer = tagList(
modalButton("Zatvori")
)
))
})
# Dinamički UI za modalni dijalog (ovde dodajte logiku za svaku opciju)
output$modalUI <- renderUI({
if (input$selectedOption == "Salesperson") {
# Logika za prikaz sadržaja za Salesperson opciju
# Ovde možete dodati bilo koje Shiny elemente ili HTML
tagList(
h4("Informacije o Salesperson-u"),
p("Ovo je primer sadržaja za Salesperson opciju.")
)
} else if (input$selectedOption == "Product") {
# Logika za prikaz sadržaja za Product opciju
tagList(
h4("Informacije o Proizvodu"),
p("Ovo je primer sadržaja za Product opciju.")
)
} else if (input$selectedOption == "Customer") {
# Logika za prikaz sadržaja za Customer opciju
tagList(
h4("Informacije o Kupcu"),
p("Ovo je primer sadržaja za Customer opciju.")
)
} else {
# Default ako opcija nije prepoznata
p("Nepoznata opcija.")
}
})
# Dinamički sadržaj za modalni dijalog (ovde dodajte logiku za svaku opciju)
output$modalContent <- renderText({
if (input$selectedOption == "Salesperson") {
# Logika za sadržaj za Salesperson opciju
"Detalji o Salesperson-u..."
} else if (input$selectedOption == "Product") {
# Logika za sadržaj za Product opciju
"Detalji o Proizvodu..."
} else if (input$selectedOption == "Customer") {
# Logika za sadržaj za Customer opciju
"Detalji o Kupcu..."
} else {
# Default ako opcija nije prepoznata
"Nepoznata opcija."
}
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Shiny Aplikacija sa Modalnim Dijalogom"),
sidebarLayout(
sidebarPanel(
# Lista dostupnih opcija koje korisnik može kliknuti
selectInput("selectedOption", "Izaberite opciju:", c("Salesperson", "Product", "Customer")),
),
mainPanel(
# Prikaz izabrane opcije
textOutput("selectedText"),
# Modalni dijalog
actionButton("openModal", "Detalji"),
# Dinamički UI za modalni dijalog
uiOutput("modalUI")
)
)
)
server <- function(input, output, session) {
# Logika za prikaz izabrane opcije
output$selectedText <- renderText({
paste("Izabrana opcija:", input$selectedOption)
})
# Logika za otvaranje modalnog dijaloga
observeEvent(input$openModal, {
showModal(modalDialog(
title = paste("Detalji za", input$selectedOption),
fluidRow(
column(12, verbatimTextOutput("modalContent"))
),
footer = tagList(
modalButton("Zatvori")
)
))
})
# Dinamički UI za modalni dijalog (ovde dodajte logiku za svaku opciju)
output$modalUI <- renderUI({
if (input$selectedOption == "Salesperson") {
# Logika za prikaz sadržaja za Salesperson opciju
# Ovde možete dodati bilo koje Shiny elemente ili HTML
tagList(
h4("Informacije o Salesperson-u"),
p("Ovo je primer sadržaja za Salesperson opciju.")
)
} else if (input$selectedOption == "Product") {
# Logika za prikaz sadržaja za Product opciju
tagList(
h4("Informacije o Proizvodu"),
p("Ovo je primer sadržaja za Product opciju.")
)
} else if (input$selectedOption == "Customer") {
# Logika za prikaz sadržaja za Customer opciju
tagList(
h4("Informacije o Kupcu"),
p("Ovo je primer sadržaja za Customer opciju.")
)
} else {
# Default ako opcija nije prepoznata
p("Nepoznata opcija.")
}
})
# Dinamički sadržaj za modalni dijalog (ovde dodajte logiku za svaku opciju)
output$modalContent <- renderText({
if (input$selectedOption == "Salesperson") {
# Logika za sadržaj za Salesperson opciju
"Detalji o Salesperson-u..."
} else if (input$selectedOption == "Product") {
# Logika za sadržaj za Product opciju
"Detalji o Proizvodu..."
} else if (input$selectedOption == "Customer") {
# Logika za sadržaj za Customer opciju
"Detalji o Kupcu..."
} else {
# Default ako opcija nije prepoznata
"Nepoznata opcija."
}
})
}
shinyApp(ui, server)
# Instalacija paketa ako ih već nemate
# install.packages("dplyr")
# install.packages("sparkline")
# Učitavanje paketa
library(dplyr)
library(sparkline)
# Vaša postojeća logika
data <- chickwts %>%
group_by(feed) %>%
summarise(weight = list(weight)) %>%
mutate(boxplot = NA, sparkline = NA)
# Funkcija za crtanje grafika u Reactable
sparkline_cell <- function(values, type = "line") {
sparkline(values, type = type, chartRangeMin = 0, chartRangeMax = max(chickwts$weight))
}
# Funkcija za dodavanje filtera u Reactable
filterable_colDef <- function(name, filterMethod = "function(rows, columnId, filterValue) { return rows; }") {
colDef(
filterable = TRUE,
filterMethod = JS(filterMethod),
filterInput = function(values, name) {
oninput <- sprintf("Reactable.setFilter('cars-range', '%s', this.value)", name)
tags$input(
type = "range",
min = floor(min(values)),
max = ceiling(max(values)),
value = floor(min(values)),
oninput = oninput,
onchange = oninput, # For IE11 support
"aria-label" = sprintf("Filter by minimum %s", name)
)
}
)
}
# Reactable za prikaz podataka
reactable(
data,
columns = list(
weight = colDef(cell = function(values) {
sparkline_cell(values, type = "bar")
}),
boxplot = colDef(cell = function(value, index) {
sparkline(data$weight[[index]], type = "box")
}),
sparkline = colDef(cell = function(value, index) {
sparkline_cell(data$weight[[index]])
}),
Price = filterable_colDef("Price")
),
defaultPageSize = 5,
elementId = "cars-range"
)
# Instalacija paketa ako ih već nemate
# install.packages("dplyr")
# install.packages("sparkline")
# Učitavanje paketa
library(dplyr)
library(sparkline)
library(reactable)
# Vaša postojeća logika
data <- chickwts %>%
group_by(feed) %>%
summarise(weight = list(weight)) %>%
mutate(boxplot = NA, sparkline = NA)
# Funkcija za crtanje grafika u Reactable
sparkline_cell <- function(values, type = "line") {
sparkline(values, type = type, chartRangeMin = 0, chartRangeMax = max(chickwts$weight))
}
# Funkcija za dodavanje filtera u Reactable
filterable_colDef <- function(name, filterMethod = "function(rows, columnId, filterValue) { return rows; }") {
colDef(
filterable = TRUE,
filterMethod = JS(filterMethod),
filterInput = function(values, name) {
oninput <- sprintf("Reactable.setFilter('cars-range', '%s', this.value)", name)
tags$input(
type = "range",
min = floor(min(values)),
max = ceiling(max(values)),
value = floor(min(values)),
oninput = oninput,
onchange = oninput, # For IE11 support
"aria-label" = sprintf("Filter by minimum %s", name)
)
}
)
}
# Reactable za prikaz podataka
reactable(
data,
columns = list(
weight = colDef(cell = function(values) {
sparkline_cell(values, type = "bar")
}),
boxplot = colDef(cell = function(value, index) {
sparkline(data$weight[[index]], type = "box")
}),
sparkline = colDef(cell = function(value, index) {
sparkline_cell(data$weight[[index]])
}),
Price = filterable_colDef("Price")
),
defaultPageSize = 5,
elementId = "cars-range"
)
# Vaša postojeća logika
data <- chickwts %>%
group_by(feed) %>%
summarise(weight = list(weight)) %>%
mutate(boxplot = NA, sparkline = NA)
View(data)
# Učitavanje paketa
library(dplyr)
library(sparkline)
library(reactable)
# Vaša postojeća logika
data <- chickwts %>%
group_by(feed) %>%
summarise(weight = list(weight)) %>%
mutate(boxplot = NA, sparkline = NA)
# Funkcija za crtanje grafika u Reactable
sparkline_cell <- function(values, type = "line") {
sparkline(values, type = type, chartRangeMin = 0, chartRangeMax = max(chickwts$weight))
}
# Funkcija za dodavanje filtera u Reactable
filterable_colDef <- function(name, filterMethod = "function(rows, columnId, filterValue) { return rows; }") {
colDef(
filterable = TRUE,
filterMethod = JS(filterMethod),
filterInput = function(values, name) {
oninput <- sprintf("Reactable.setFilter('cars-range', '%s', this.value)", name)
tags$input(
type = "range",
min = floor(min(values)),
max = ceiling(max(values)),
value = floor(min(values)),
oninput = oninput,
onchange = oninput, # For IE11 support
"aria-label" = sprintf("Filter by minimum %s", name)
)
}
)
}
# Reactable za prikaz podataka
reactable(
data,
columns = list(
feed = colDef(name = "Feed"),
weight = colDef(cell = function(values) {
sparkline_cell(values, type = "bar")
}),
boxplot = colDef(cell = function(value, index) {
sparkline(data$weight[[index]], type = "box")
}),
sparkline = colDef(cell = function(value, index) {
sparkline_cell(data$weight[[index]])
}),
Price = filterable_colDef("Price")
),
defaultPageSize = 5,
elementId = "cars-range"
)
